CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12 FATAL_ERROR)
PROJECT(Skia-C)

OPTION(TREAT_WARNINGS_AS_ERRORS "Treat compiler warnings as errors. We use the highest warnings levels for compilers." OFF)

IF(MSVC)
	SET(MSVC_INSTALL_PATH "${PROJECT_SOURCE_DIR}/Windows")
	SET(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${MSVC_INSTALL_PATH}")

	IF(MSVC10)
		SET(MSVC_VERSION_STRING vc100)
	ELSEIF(MSVC11)
		SET(MSVC_VERSION_STRING vc110)
	ELSEIF(MSVC90)
		SET(MSVC_VERSION_STRING vc90)
	ELSEIF(MSVC80)
		SET(MSVC_VERSION_STRING vc80)
	ENDIF()

	# !FIXME! Actually detect compiler architecture version....
	IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET(MSVC_ARCHITECTURE_STRING x64)
	ELSE()
		SET(MSVC_ARCHITECTURE_STRING x86)
	ENDIF()

	SET(MSVC_LIB_DIR "${MSVC_INSTALL_PATH}/lib/${MSVC_ARCHITECTURE_STRING}/${MSVC_VERSION_STRING}")
	SET(CMAKE_LIBRARY_PATH "${CMAKE_LIBRARY_PATH};${MSVC_LIB_DIR}")

  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -fms-extensions")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fms-extensions")

ENDIF(MSVC)

IF(TREAT_WARNINGS_AS_ERRORS)
  IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
  ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
  ENDIF(MSVC)
ENDIF(TREAT_WARNINGS_AS_ERRORS)

SET(SKIA_DIRECTORY "" CACHE PATH "Path containing skia source code")
IF("${SKIA_DIRECTORY}" STREQUAL "")
  MESSAGE(FATAL_ERROR "Must specify path for skia directory")
ENDIF()

IF(NOT EXISTS "${SKIA_DIRECTORY}/")
  MESSAGE(FATAL_ERROR "Skia directory not found")
ENDIF()

FIND_PACKAGE(OpenGL)
IF(NOT OPENGL_FOUND)
  MESSAGE("OpenGL not found... skipping GPU build")
ENDIF()

FIND_PACKAGE(Freetype)
IF(NOT FREETYPE_FOUND)
  MESSAGE(FATAL_ERROR "FreeType library not found...")
ENDIF()

FIND_PACKAGE(PNG)
IF(NOT PNG_FOUND)
  MESSAGE(FATAL_ERROR "PNG library not found...")
ENDIF()

FIND_PACKAGE(GIF)
IF(NOT GIF_FOUND)
  MESSAGE(FATAL_ERROR "GIF library not found...")
ENDIF()

#######
## FontConfig
find_path(FONTCONFIG_INCLUDE_DIR fontconfig/fontconfig.h)

find_library(FONTCONFIG_LIBRARY NAMES fontconfig)

# handle the QUIETLY and REQUIRED arguments and set FONTCONFIG_FOUND to TRUE if
# all listed variables are TRUE
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(FontConfig DEFAULT_MSG
  FONTCONFIG_LIBRARY  FONTCONFIG_INCLUDE_DIR)

if(FONTCONFIG_FOUND)
  set( FONTCONFIG_LIBRARIES ${FONTCONFIG_LIBRARY} )
endif()

mark_as_advanced(FONTCONFIG_INCLUDE_DIR FONTCONFIG_LIBRARY FONTCONFIG_LIBRARIES)

IF(NOT FONTCONFIG_FOUND)
  MESSAGE(FATAL_ERROR "FontConfig library not found...")
ENDIF()

########

# Set build flags for skia
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
  ADD_DEFINITIONS(-DSK_SAMPLES_FOR_X)
ENDIF()

IF(UNIX)
  ADD_DEFINITIONS(-DSK_BUILD_FOR_UNIX)
ENDIF()

SET(ENV{BUILDTYPE} ${CMAKE_BUILD_TYPE})
EXECUTE_PROCESS(COMMAND make WORKING_DIRECTORY ${SKIA_DIRECTORY})

ADD_LIBRARY(cskia src/skia.cpp)
INCLUDE_DIRECTORIES(${Skia-C_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/include/config)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/include/core)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/include/effects)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/src/core)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/include/images)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/include/gpu)
INCLUDE_DIRECTORIES(${SKIA_DIRECTORY}/include/utils)

FIND_LIBRARY(SKIA_LIB_CORE NAMES skia_core PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_OPTS NAMES skia_opts PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_OPTS_SSE4 NAMES skia_opts_sse4 PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_OPTS_SSSE3 NAMES skia_opts_ssse3 PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_IMAGES NAMES skia_images PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_ANIMATOR NAMES skia_animator PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_EFFECTS NAMES skia_effects PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_PDF NAMES skia_pdf PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_PORTS NAMES skia_ports PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_SFNT NAMES skia_sfnt PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_VIEWS NAMES skia_views PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_SKGPU NAMES skia_skgpu PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_UTILS NAMES skia_utils PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE} NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_ETC1 NAMES etc1 PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_KTX NAMES SkKTX PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_WEBP_ENC NAMES webp_enc PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_WEBP_DEC NAMES webp_dec PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_WEBP_DEMUX NAMES webp_demux PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_WEBP_UTILS NAMES webp_utils PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_WEBP_DSP NAMES webp_dsp PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)
FIND_LIBRARY(SKIA_LIB_JPEG NAMES jpeg PATHS ${SKIA_DIRECTORY}/out/${CMAKE_BUILD_TYPE}/obj/gyp/ NO_DEFAULT_PATH)

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_ANIMATOR})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_PDF})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_SFNT})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_VIEWS})

IF(OPENGL_FOUND)
  SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_SKGPU})
  SET(SKIA_LIBS ${SKIA_LIBS} ${OPENGL_LIBRARIES})
ENDIF()

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_IMAGES})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_KTX})

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_UTILS})

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_EFFECTS})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_PORTS})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_CORE})

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_OPTS})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_OPTS_SSE4})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_OPTS_SSSE3})

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_ETC1})

SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_WEBP_ENC})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_WEBP_DEC})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_WEBP_DEMUX})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_WEBP_UTILS})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_WEBP_DSP})
SET(SKIA_LIBS ${SKIA_LIBS} ${SKIA_LIB_JPEG})

TARGET_LINK_LIBRARIES(cskia -Wl,--start-group ${SKIA_LIBS} -Wl,--end-group)
TARGET_LINK_LIBRARIES(cskia ${FREETYPE_LIBRARIES})
TARGET_LINK_LIBRARIES(cskia ${FONTCONFIG_LIBRARIES})
TARGET_LINK_LIBRARIES(cskia ${PNG_LIBRARIES})
TARGET_LINK_LIBRARIES(cskia ${GIF_LIBRARIES})

ADD_EXECUTABLE(cskia_test tests/test_libskia.c include/skia.h)
TARGET_LINK_LIBRARIES(cskia_test cskia)
